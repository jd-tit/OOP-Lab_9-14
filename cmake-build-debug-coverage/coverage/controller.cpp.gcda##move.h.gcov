        -:    0:Source:/usr/include/c++/9/bits/move.h
        -:    0:Graph:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/controller.cpp.gcno
        -:    0:Data:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/controller.cpp.gcda
        -:    0:Runs:1
        -:    1:// Move, forward and identity for C++11 + swap -*- C++ -*-
        -:    2:
        -:    3:// Copyright (C) 2007-2019 Free Software Foundation, Inc.
        -:    4://
        -:    5:// This file is part of the GNU ISO C++ Library.  This library is free
        -:    6:// software; you can redistribute it and/or modify it under the
        -:    7:// terms of the GNU General Public License as published by the
        -:    8:// Free Software Foundation; either version 3, or (at your option)
        -:    9:// any later version.
        -:   10:
        -:   11:// This library is distributed in the hope that it will be useful,
        -:   12:// but WITHOUT ANY WARRANTY; without even the implied warranty of
        -:   13:// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
        -:   14:// GNU General Public License for more details.
        -:   15:
        -:   16:// Under Section 7 of GPL version 3, you are granted additional
        -:   17:// permissions described in the GCC Runtime Library Exception, version
        -:   18:// 3.1, as published by the Free Software Foundation.
        -:   19:
        -:   20:// You should have received a copy of the GNU General Public License and
        -:   21:// a copy of the GCC Runtime Library Exception along with this program;
        -:   22:// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
        -:   23:// <http://www.gnu.org/licenses/>.
        -:   24:
        -:   25:/** @file bits/move.h
        -:   26: *  This is an internal header file, included by other library headers.
        -:   27: *  Do not attempt to use it directly. @headername{utility}
        -:   28: */
        -:   29:
        -:   30:#ifndef _MOVE_H
        -:   31:#define _MOVE_H 1
        -:   32:
        -:   33:#include <bits/c++config.h>
        -:   34:#include <bits/concept_check.h>
        -:   35:
        -:   36:namespace std _GLIBCXX_VISIBILITY(default)
        -:   37:{
        -:   38:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   39:
        -:   40:  // Used, in C++03 mode too, by allocators, etc.
        -:   41:  /**
        -:   42:   *  @brief Same as C++11 std::addressof
        -:   43:   *  @ingroup utilities
        -:   44:   */
        -:   45:  template<typename _Tp>
        -:   46:    inline _GLIBCXX_CONSTEXPR _Tp*
     110*:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
     110*:   48:    { return __builtin_addressof(__r); }
------------------
_ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmELb1EEEEPT_RSC_:
function _ZSt11__addressofINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmELb1EEEEPT_RSC_ called 2 returned 100% blocks executed 100%
        2:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        2:   48:    { return __builtin_addressof(__r); }
        2:   48-block  0
------------------
_ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_:
function _ZSt11__addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_ called 1 returned 100% blocks executed 100%
        1:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        1:   48:    { return __builtin_addressof(__r); }
        1:   48-block  0
------------------
_ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_:
function _ZSt11__addressofINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEPT_RS6_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
------------------
_ZSt11__addressofIKcEPT_RS1_:
function _ZSt11__addressofIKcEPT_RS1_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
------------------
_ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EPT_RSE_:
function _ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EPT_RSE_ called 8 returned 100% blocks executed 100%
        8:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        8:   48:    { return __builtin_addressof(__r); }
        8:   48-block  0
------------------
_ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EPT_RSE_:
function _ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EPT_RSE_ called 7 returned 100% blocks executed 100%
        7:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        7:   48:    { return __builtin_addressof(__r); }
        7:   48-block  0
------------------
_ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EPT_RSE_:
function _ZSt11__addressofIKZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EPT_RSE_ called 8 returned 100% blocks executed 100%
        8:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
        8:   48:    { return __builtin_addressof(__r); }
        8:   48-block  0
------------------
_ZSt11__addressofI6CourseEPT_RS1_:
function _ZSt11__addressofI6CourseEPT_RS1_ called 84 returned 100% blocks executed 100%
       84:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
       84:   48:    { return __builtin_addressof(__r); }
       84:   48-block  0
------------------
_ZSt11__addressofIcEPT_RS0_:
function _ZSt11__addressofIcEPT_RS0_ called 0 returned 0% blocks executed 0%
    #####:   47:    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
    #####:   48:    { return __builtin_addressof(__r); }
    %%%%%:   48-block  0
------------------
        -:   49:
        -:   50:#if __cplusplus >= 201103L
        -:   51:
        -:   52:_GLIBCXX_END_NAMESPACE_VERSION
        -:   53:} // namespace
        -:   54:
        -:   55:#include <type_traits> // Brings in std::declval too.
        -:   56:
        -:   57:namespace std _GLIBCXX_VISIBILITY(default)
        -:   58:{
        -:   59:_GLIBCXX_BEGIN_NAMESPACE_VERSION
        -:   60:
        -:   61:  /**
        -:   62:   *  @addtogroup utilities
        -:   63:   *  @{
        -:   64:   */
        -:   65:
        -:   66:  /**
        -:   67:   *  @brief  Forward an lvalue.
        -:   68:   *  @return The parameter cast to the specified type.
        -:   69:   *
        -:   70:   *  This function is used to implement "perfect forwarding".
        -:   71:   */
        -:   72:  template<typename _Tp>
        -:   73:    constexpr _Tp&&
     219*:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
     219*:   75:    { return static_cast<_Tp&&>(__t); }
------------------
_ZSt7forwardI6CourseEOT_RNSt16remove_referenceIS1_E4typeE:
function _ZSt7forwardI6CourseEOT_RNSt16remove_referenceIS1_E4typeE called 28 returned 100% blocks executed 100%
       28:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
       28:   75:    { return static_cast<_Tp&&>(__t); }
       28:   75-block  0
------------------
_ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE:
function _ZSt7forwardIRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEOT_RNSt16remove_referenceIS8_E4typeE called 0 returned 0% blocks executed 0%
    #####:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
    #####:   75:    { return static_cast<_Tp&&>(__t); }
    %%%%%:   75-block  0
------------------
_ZSt7forwardIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardIRSt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmEEOT_RNSt16remove_referenceISA_E4typeE called 5 returned 100% blocks executed 100%
        5:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        5:   75:    { return static_cast<_Tp&&>(__t); }
        5:   75-block  0
------------------
_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE:
function _ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE called 6 returned 100% blocks executed 100%
        6:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        6:   75:    { return static_cast<_Tp&&>(__t); }
        6:   75-block  0
------------------
_ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE:
function _ZSt7forwardISt5tupleIJRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEEOT_RNSt16remove_referenceISA_E4typeE called 6 returned 100% blocks executed 100%
        6:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        6:   75:    { return static_cast<_Tp&&>(__t); }
        6:   75-block  0
------------------
_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE called 6 returned 100% blocks executed 100%
        6:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        6:   75:    { return static_cast<_Tp&&>(__t); }
        6:   75-block  0
------------------
_ZSt7forwardIRK6CourseEOT_RNSt16remove_referenceIS3_E4typeE:
function _ZSt7forwardIRK6CourseEOT_RNSt16remove_referenceIS3_E4typeE called 162 returned 100% blocks executed 100%
      162:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
      162:   75:    { return static_cast<_Tp&&>(__t); }
      162:   75-block  0
------------------
_ZSt7forwardIRSt6vectorI6CourseSaIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE:
function _ZSt7forwardIRSt6vectorI6CourseSaIS1_EEEOT_RNSt16remove_referenceIS5_E4typeE called 3 returned 100% blocks executed 100%
        3:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        3:   75:    { return static_cast<_Tp&&>(__t); }
        3:   75-block  0
------------------
_ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EOT_RNSt16remove_referenceISD_E4typeE called 1 returned 100% blocks executed 100%
        1:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        1:   75:    { return static_cast<_Tp&&>(__t); }
        1:   75-block  0
------------------
_ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EOT_RNSt16remove_referenceISD_E4typeE called 1 returned 100% blocks executed 100%
        1:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        1:   75:    { return static_cast<_Tp&&>(__t); }
        1:   75-block  0
------------------
_ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EOT_RNSt16remove_referenceISD_E4typeE:
function _ZSt7forwardIZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EOT_RNSt16remove_referenceISD_E4typeE called 1 returned 100% blocks executed 100%
        1:   74:    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
        1:   75:    { return static_cast<_Tp&&>(__t); }
        1:   75-block  0
------------------
        -:   76:
        -:   77:  /**
        -:   78:   *  @brief  Forward an rvalue.
        -:   79:   *  @return The parameter cast to the specified type.
        -:   80:   *
        -:   81:   *  This function is used to implement "perfect forwarding".
        -:   82:   */
        -:   83:  template<typename _Tp>
        -:   84:    constexpr _Tp&&
        -:   85:    forward(typename std::remove_reference<_Tp>::type&& __t) noexcept
        -:   86:    {
        -:   87:      static_assert(!std::is_lvalue_reference<_Tp>::value, "template argument"
        -:   88:		    " substituting _Tp is an lvalue reference type");
        -:   89:      return static_cast<_Tp&&>(__t);
        -:   90:    }
        -:   91:
        -:   92:  /**
        -:   93:   *  @brief  Convert a value to an rvalue.
        -:   94:   *  @param  __t  A thing of arbitrary type.
        -:   95:   *  @return The parameter cast to an rvalue-reference to allow moving it.
        -:   96:  */
        -:   97:  template<typename _Tp>
        -:   98:    constexpr typename std::remove_reference<_Tp>::type&&
     266*:   99:    move(_Tp&& __t) noexcept
     266*:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
------------------
_ZSt4moveIRPFbRKSt9_Any_dataRK6CourseS5_EEONSt16remove_referenceIT_E4typeEOSA_:
function _ZSt4moveIRPFbRKSt9_Any_dataRK6CourseS5_EEONSt16remove_referenceIT_E4typeEOSA_ called 51 returned 100% blocks executed 100%
       51:   99:    move(_Tp&& __t) noexcept
       51:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       51:  100-block  0
------------------
_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRPSt6vectorI6CourseSaIS1_EEEONSt16remove_referenceIT_E4typeEOS7_:
function _ZSt4moveIRPSt6vectorI6CourseSaIS1_EEEONSt16remove_referenceIT_E4typeEOS7_ called 5 returned 100% blocks executed 100%
        5:   99:    move(_Tp&& __t) noexcept
        5:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        5:  100-block  0
------------------
_ZSt4moveIRPSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSt4hashIS6_ESt8equal_toIS6_ESaISt4pairIKS6_mEEEEONSt16remove_referenceIT_E4typeEOSJ_:
function _ZSt4moveIRPSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmSt4hashIS6_ESt8equal_toIS6_ESaISt4pairIKS6_mEEEEONSt16remove_referenceIT_E4typeEOSJ_ called 1 returned 100% blocks executed 100%
        1:   99:    move(_Tp&& __t) noexcept
        1:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        1:  100-block  0
------------------
_ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIRSaIcEEONSt16remove_referenceIT_E4typeEOS3_ called 0 returned 0% blocks executed 0%
    #####:   99:    move(_Tp&& __t) noexcept
    #####:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
    %%%%%:  100-block  0
------------------
_ZSt4moveIRZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlR6CourseE_EONSt16remove_referenceIT_E4typeEOSE_:
function _ZSt4moveIRZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlR6CourseE_EONSt16remove_referenceIT_E4typeEOSE_ called 18 returned 100% blocks executed 100%
       18:   99:    move(_Tp&& __t) noexcept
       18:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       18:  100-block  0
------------------
_ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EONSt16remove_referenceIT_E4typeEOSF_:
function _ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E_EONSt16remove_referenceIT_E4typeEOSF_ called 3 returned 100% blocks executed 100%
        3:   99:    move(_Tp&& __t) noexcept
        3:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  100-block  0
------------------
_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_ called 51 returned 100% blocks executed 100%
       51:   99:    move(_Tp&& __t) noexcept
       51:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       51:  100-block  0
------------------
_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_:
function _ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_ called 51 returned 100% blocks executed 100%
       51:   99:    move(_Tp&& __t) noexcept
       51:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       51:  100-block  0
------------------
_ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt8functionIFbRK6CourseS6_EEEEEONSt16remove_referenceIT_E4typeEOSC_:
function _ZSt4moveIRN9__gnu_cxx5__ops15_Iter_comp_iterISt8functionIFbRK6CourseS6_EEEEEONSt16remove_referenceIT_E4typeEOSC_ called 8 returned 100% blocks executed 100%
        8:   99:    move(_Tp&& __t) noexcept
        8:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        8:  100-block  0
------------------
_ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EONSt16remove_referenceIT_E4typeEOSF_:
function _ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E0_EONSt16remove_referenceIT_E4typeEOSF_ called 3 returned 100% blocks executed 100%
        3:   99:    move(_Tp&& __t) noexcept
        3:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  100-block  0
------------------
_ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EONSt16remove_referenceIT_E4typeEOSF_:
function _ZSt4moveIRZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseSB_E1_EONSt16remove_referenceIT_E4typeEOSF_ called 3 returned 100% blocks executed 100%
        3:   99:    move(_Tp&& __t) noexcept
        3:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        3:  100-block  0
------------------
_ZSt4moveIRSt8functionIFbRK6CourseS3_EEEONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRSt8functionIFbRK6CourseS3_EEEONSt16remove_referenceIT_E4typeEOS8_ called 14 returned 100% blocks executed 100%
       14:   99:    move(_Tp&& __t) noexcept
       14:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       14:  100-block  0
------------------
_ZSt4moveIRZN18ContractController22add_course_to_contractERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseE_EONSt16remove_referenceIT_E4typeEOSF_:
function _ZSt4moveIRZN18ContractController22add_course_to_contractERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEUlRK6CourseE_EONSt16remove_referenceIT_E4typeEOSF_ called 4 returned 100% blocks executed 100%
        4:   99:    move(_Tp&& __t) noexcept
        4:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        4:  100-block  0
------------------
_ZSt4moveIRZN4RepoI6CourseE12remove_by_idEmEUlRKS1_E_EONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRZN4RepoI6CourseE12remove_by_idEmEUlRKS1_E_EONSt16remove_referenceIT_E4typeEOS8_ called 6 returned 100% blocks executed 100%
        6:   99:    move(_Tp&& __t) noexcept
        6:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        6:  100-block  0
------------------
_ZSt4moveIRZN4RepoI6CourseE10find_by_idEmEUlRKS1_E_EONSt16remove_referenceIT_E4typeEOS8_:
function _ZSt4moveIRZN4RepoI6CourseE10find_by_idEmEUlRKS1_E_EONSt16remove_referenceIT_E4typeEOS8_ called 6 returned 100% blocks executed 100%
        6:   99:    move(_Tp&& __t) noexcept
        6:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
        6:  100-block  0
------------------
_ZSt4moveIR6CourseEONSt16remove_referenceIT_E4typeEOS3_:
function _ZSt4moveIR6CourseEONSt16remove_referenceIT_E4typeEOS3_ called 42 returned 100% blocks executed 100%
       42:   99:    move(_Tp&& __t) noexcept
       42:  100:    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
       42:  100-block  0
------------------
        -:  101:
        -:  102:
        -:  103:  template<typename _Tp>
        -:  104:    struct __move_if_noexcept_cond
        -:  105:    : public __and_<__not_<is_nothrow_move_constructible<_Tp>>,
        -:  106:                    is_copy_constructible<_Tp>>::type { };
        -:  107:
        -:  108:  /**
        -:  109:   *  @brief  Conditionally convert a value to an rvalue.
        -:  110:   *  @param  __x  A thing of arbitrary type.
        -:  111:   *  @return The parameter, possibly cast to an rvalue-reference.
        -:  112:   *
        -:  113:   *  Same as std::move unless the type's move constructor could throw and the
        -:  114:   *  type is copyable, in which case an lvalue-reference is returned instead.
        -:  115:   */
        -:  116:  template<typename _Tp>
        -:  117:    constexpr typename
        -:  118:    conditional<__move_if_noexcept_cond<_Tp>::value, const _Tp&, _Tp&&>::type
        -:  119:    move_if_noexcept(_Tp& __x) noexcept
        -:  120:    { return std::move(__x); }
        -:  121:
        -:  122:  // declval, from type_traits.
        -:  123:
        -:  124:#if __cplusplus > 201402L
        -:  125:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  126:  // 2296. std::addressof should be constexpr
        -:  127:# define __cpp_lib_addressof_constexpr 201603
        -:  128:#endif
        -:  129:  /**
        -:  130:   *  @brief Returns the actual address of the object or function
        -:  131:   *         referenced by r, even in the presence of an overloaded
        -:  132:   *         operator&.
        -:  133:   *  @param  __r  Reference to an object or function.
        -:  134:   *  @return   The actual address.
        -:  135:  */
        -:  136:  template<typename _Tp>
        -:  137:    inline _GLIBCXX17_CONSTEXPR _Tp*
       3*:  138:    addressof(_Tp& __r) noexcept
       3*:  139:    { return std::__addressof(__r); }
------------------
_ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmELb1EEEEPT_RSC_:
function _ZSt9addressofINSt8__detail10_Hash_nodeISt4pairIKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEmELb1EEEEPT_RSC_ called 2 returned 100% blocks executed 100%
        2:  138:    addressof(_Tp& __r) noexcept
        2:  139:    { return std::__addressof(__r); }
        2:  139-block  0
call    0 returned 2
------------------
_ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_:
function _ZSt9addressofIPNSt8__detail15_Hash_node_baseEEPT_RS3_ called 1 returned 100% blocks executed 100%
        1:  138:    addressof(_Tp& __r) noexcept
        1:  139:    { return std::__addressof(__r); }
        1:  139-block  0
call    0 returned 1
------------------
_ZSt9addressofIKcEPT_RS1_:
function _ZSt9addressofIKcEPT_RS1_ called 0 returned 0% blocks executed 0%
    #####:  138:    addressof(_Tp& __r) noexcept
    #####:  139:    { return std::__addressof(__r); }
    %%%%%:  139-block  0
call    0 never executed
------------------
_ZSt9addressofIcEPT_RS0_:
function _ZSt9addressofIcEPT_RS0_ called 0 returned 0% blocks executed 0%
    #####:  138:    addressof(_Tp& __r) noexcept
    #####:  139:    { return std::__addressof(__r); }
    %%%%%:  139-block  0
call    0 never executed
------------------
        -:  140:
        -:  141:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  142:  // 2598. addressof works on temporaries
        -:  143:  template<typename _Tp>
        -:  144:    const _Tp* addressof(const _Tp&&) = delete;
        -:  145:
        -:  146:  // C++11 version of std::exchange for internal use.
        -:  147:  template <typename _Tp, typename _Up = _Tp>
        -:  148:    inline _Tp
        -:  149:    __exchange(_Tp& __obj, _Up&& __new_val)
        -:  150:    {
        -:  151:      _Tp __old_val = std::move(__obj);
        -:  152:      __obj = std::forward<_Up>(__new_val);
        -:  153:      return __old_val;
        -:  154:    }
        -:  155:
        -:  156:  /// @} group utilities
        -:  157:
        -:  158:#define _GLIBCXX_MOVE(__val) std::move(__val)
        -:  159:#define _GLIBCXX_FORWARD(_Tp, __val) std::forward<_Tp>(__val)
        -:  160:#else
        -:  161:#define _GLIBCXX_MOVE(__val) (__val)
        -:  162:#define _GLIBCXX_FORWARD(_Tp, __val) (__val)
        -:  163:#endif
        -:  164:
        -:  165:  /**
        -:  166:   *  @addtogroup utilities
        -:  167:   *  @{
        -:  168:   */
        -:  169:
        -:  170:  /**
        -:  171:   *  @brief Swaps two values.
        -:  172:   *  @param  __a  A thing of arbitrary type.
        -:  173:   *  @param  __b  Another thing of arbitrary type.
        -:  174:   *  @return   Nothing.
        -:  175:  */
        -:  176:  template<typename _Tp>
        -:  177:    inline
        -:  178:#if __cplusplus >= 201103L
        -:  179:    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
        -:  180:			      is_move_constructible<_Tp>,
        -:  181:			      is_move_assignable<_Tp>>::value>::type
      51*:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
      51*:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
      51*:  194:      __a = _GLIBCXX_MOVE(__b);
      51*:  195:      __b = _GLIBCXX_MOVE(__tmp);
      51*:  196:    }
------------------
_ZSt4swapI6CourseENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_:
function _ZSt4swapI6CourseENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_ called 0 returned 0% blocks executed 0%
    #####:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
    #####:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
    %%%%%:  193-block  0
call    0 never executed
call    1 never executed
    %%%%%:  193-block  1
call    2 never executed
    $$$$$:  193-block  2
call    3 never executed
    #####:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  195:      __b = _GLIBCXX_MOVE(__tmp);
    %%%%%:  195-block  0
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
    #####:  196:    }
------------------
_ZSt4swapIPFbRKSt9_Any_dataRK6CourseS5_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_:
function _ZSt4swapIPFbRKSt9_Any_dataRK6CourseS5_EENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_ called 17 returned 100% blocks executed 100%
       17:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
       17:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
       17:  193-block  0
call    0 returned 17
       17:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 17
       17:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 17
       17:  196:    }
------------------
_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_:
function _ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_ called 17 returned 100% blocks executed 100%
       17:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
       17:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
       17:  193-block  0
call    0 returned 17
       17:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 17
       17:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 17
       17:  196:    }
------------------
_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_:
function _ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_ called 17 returned 100% blocks executed 100%
       17:  182:    swap(_Tp& __a, _Tp& __b)
        -:  183:    noexcept(__and_<is_nothrow_move_constructible<_Tp>,
        -:  184:	            is_nothrow_move_assignable<_Tp>>::value)
        -:  185:#else
        -:  186:    void
        -:  187:    swap(_Tp& __a, _Tp& __b)
        -:  188:#endif
        -:  189:    {
        -:  190:      // concept requirements
        -:  191:      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
        -:  192:
       17:  193:      _Tp __tmp = _GLIBCXX_MOVE(__a);
       17:  193-block  0
call    0 returned 17
       17:  194:      __a = _GLIBCXX_MOVE(__b);
call    0 returned 17
       17:  195:      __b = _GLIBCXX_MOVE(__tmp);
call    0 returned 17
       17:  196:    }
------------------
        -:  197:
        -:  198:  // _GLIBCXX_RESOLVE_LIB_DEFECTS
        -:  199:  // DR 809. std::swap should be overloaded for array types.
        -:  200:  /// Swap the contents of two arrays.
        -:  201:  template<typename _Tp, size_t _Nm>
        -:  202:    inline
        -:  203:#if __cplusplus >= 201103L
        -:  204:    typename enable_if<__is_swappable<_Tp>::value>::type
        -:  205:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  206:    noexcept(__is_nothrow_swappable<_Tp>::value)
        -:  207:#else
        -:  208:    void
        -:  209:    swap(_Tp (&__a)[_Nm], _Tp (&__b)[_Nm])
        -:  210:#endif
        -:  211:    {
        -:  212:      for (size_t __n = 0; __n < _Nm; ++__n)
        -:  213:	swap(__a[__n], __b[__n]);
        -:  214:    }
        -:  215:
        -:  216:  /// @} group utilities
        -:  217:_GLIBCXX_END_NAMESPACE_VERSION
        -:  218:} // namespace
        -:  219:
        -:  220:#endif /* _MOVE_H */
