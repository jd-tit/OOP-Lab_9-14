        -:    0:Source:/mnt/c/Projects/fac/OOP/Lab8/controller.cpp
        -:    0:Graph:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/controller.cpp.gcno
        -:    0:Data:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/controller.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by jdt on 3/27/2022.
        -:    3://
        -:    4:
        -:    5:#include "Vector.h"
        -:    6:#include <functional>
        -:    7:#include "controller.h"
        -:    8:#include "domain.h"
        -:    9:#include "validate.h"
        -:   10:#include "exception.h"
        -:   11:
        -:   12:std::vector<std::string> ContractController::people_names, ContractController::course_names, ContractController::course_types;
        -:   13:std::default_random_engine ContractController::rng;
        -:   14:
        -:   15:void quicksort(std::vector<Course> &list, int l, int r,
        -:   16:               const std::function<bool(const Course &first, const Course &second)> &cmp);
        -:   17:
function _ZN18ContractController10add_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_ called 13 returned 54% blocks executed 56%
       13:   18:void ContractController::add_course(const std::string &name, const std::string &teacher,
        -:   19:                                    const std::string &type,
        -:   20:                                    const std::string &hours_per_week) {
        -:   21:    unsigned numerical_hpw;
        -:   22:
       13:   23:    if (!is_valid_string(name)) {
       13:   23-block  0
call    0 returned 13
branch  1 taken 1 (fallthrough)
branch  2 taken 12
        1:   24:        throw (NameError("Error: Invalid name."));
        1:   24-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   24-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   24-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   24-block  3
call   11 never executed
    $$$$$:   24-block  4
    $$$$$:   24-block  5
call   12 never executed
    $$$$$:   24-block  6
    $$$$$:   24-block  7
call   13 never executed
        -:   25:    }
        -:   26:
       12:   27:    if (!is_valid_string(teacher)) {
       12:   27-block  0
call    0 returned 12
branch  1 taken 1 (fallthrough)
branch  2 taken 11
        1:   28:        throw (NameError("Error: Invalid teacher name."));
        1:   28-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   28-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   28-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   28-block  3
call   11 never executed
    $$$$$:   28-block  4
    $$$$$:   28-block  5
call   12 never executed
    $$$$$:   28-block  6
    $$$$$:   28-block  7
call   13 never executed
        -:   29:    }
        -:   30:
       11:   31:    if (!is_valid_string(type)) {
       11:   31-block  0
call    0 returned 11
branch  1 taken 1 (fallthrough)
branch  2 taken 10
        1:   32:        throw (CourseTypeError("Error: Invalid course type"));
        1:   32-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   32-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   32-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   32-block  3
call   11 never executed
    $$$$$:   32-block  4
    $$$$$:   32-block  5
call   12 never executed
    $$$$$:   32-block  6
    $$$$$:   32-block  7
call   13 never executed
        -:   33:    }
        -:   34:
        -:   35:    try {
       10:   36:        numerical_hpw = std::stoi(hours_per_week);
       10:   36-block  0
call    0 returned 10
branch  1 taken 9 (fallthrough)
branch  2 taken 1 (throw)
        -:   37:    }
        2:   38:    catch (std::invalid_argument &e) {
        1:   38-block  0
call    0 returned 1
        1:   38-block  1
call    1 returned 1
        1:   39:        throw (HoursPerWeekError("Error: Input is not a number."));
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   39-block  0
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   39-block  1
call    8 returned 1
call    9 returned 1
call   10 returned 1
    $$$$$:   39-block  2
call   11 never executed
    $$$$$:   39-block  3
    $$$$$:   39-block  4
call   12 never executed
    $$$$$:   39-block  5
    $$$$$:   39-block  6
call   13 never executed
        -:   40:    }
        9:   41:    if (!is_valid_hours_per_week(numerical_hpw)) {
        9:   41-block  0
call    0 returned 9
branch  1 taken 1 (fallthrough)
branch  2 taken 8
        1:   42:        throw (HoursPerWeekError("Invalid number of hours per week."));
        1:   42-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:   42-block  1
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0 (throw)
        1:   42-block  2
call    8 returned 1
call    9 returned 1
call   10 returned 0
    $$$$$:   42-block  3
call   11 never executed
    $$$$$:   42-block  4
    $$$$$:   42-block  5
call   12 never executed
    $$$$$:   42-block  6
    $$$$$:   42-block  7
call   13 never executed
        -:   43:    }
        -:   44:
        -:   45:    try {
        8:   46:        getCourse(name);
        8:   46-block  0
call    0 returned 8
branch  1 taken 1 (fallthrough)
branch  2 taken 7 (throw)
        -:   47:    }
       14:   48:    catch (std::out_of_range &e) {
        7:   48-block  0
call    0 returned 7
call    1 returned 7
    $$$$$:   48-block  1
call    2 never executed
       14:   49:        Course course{name, type, teacher, numerical_hpw, i_repo.next_free_id};
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   49-block  0
call    3 returned 7
    $$$$$:   49-block  1
call    4 never executed
        7:   50:        i_repo.add(course);
        7:   50-block  0
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
        7:   51:        return;
        -:   52:    }
        1:   53:    throw (std::invalid_argument("Error: Duplicate name."));
        1:   53-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   53-block  1
call    4 returned 0
    $$$$$:   53-block  2
call    5 never executed
        -:   54:}
        -:   55:
function _ZN18ContractController6getAllEv called 4 returned 100% blocks executed 100%
        4:   56:const Repo<Course> &ContractController::getAll() {
        4:   57:    return i_repo;
        4:   57-block  0
        -:   58:}
        -:   59:
function _ZN18ContractController13remove_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:   60:void ContractController::remove_course(const std::string &id_buff) {
        1:   61:    size_t target_id = std::stoi(id_buff);
        1:   61-block  0
call    0 returned 1
        1:   62:    i_repo.remove_by_id(target_id);
call    0 returned 1
        1:   63:}
        -:   64:
function _ZN18ContractController13modify_courseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_S7_S7_S7_ called 1 returned 100% blocks executed 100%
        1:   65:void ContractController::modify_course(const std::string &id_buff,
        -:   66:                                       const std::string &name,
        -:   67:                                       const std::string &teacher,
        -:   68:                                       const std::string &type,
        -:   69:                                       const std::string &hours_per_week) {
        1:   70:    auto &res = i_repo.find_by_id(std::stoi(id_buff));
        1:   70-block  0
call    0 returned 1
call    1 returned 1
        1:   71:    auto hpw = std::stoi(hours_per_week);
call    0 returned 1
        1:   72:    res.set_name(name);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   73:    res.set_teacher(teacher);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   74:    res.set_type(type);
call    0 returned 1
call    1 returned 1
call    2 returned 1
        1:   75:    res.set_hpw(hpw);
call    0 returned 1
        1:   76:}
        -:   77:
function _ZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 22% blocks executed 75%
        9:   78:const Course &ContractController::getCourse(const std::string &name) {
        -:   79:    auto result = std::find_if(i_repo.begin(), i_repo.end(),
function _ZZN18ContractController9getCourseERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlR6CourseE_clES9_ called 14 returned 100% blocks executed 100%
       14:   80:                               [name](Course &e) { return e.get_name() == name; }
       14:   80-block  0
call    0 returned 14
call    1 returned 14
        9:   81:    );
        9:   81-block  0
call    0 returned 9
branch  1 taken 9 (fallthrough)
branch  2 taken 0 (throw)
        9:   81-block  1
call    3 returned 9
call    4 returned 9
call    5 returned 9
branch  6 taken 9 (fallthrough)
branch  7 taken 0 (throw)
        9:   81-block  2
call    8 returned 9
    $$$$$:   81-block  3
call    9 never executed
    $$$$$:   81-block  4
        -:   82:
        9:   83:    if (result == i_repo.end())
call    0 returned 9
call    1 returned 9
branch  2 taken 7 (fallthrough)
branch  3 taken 2
        7:   84:        throw (std::out_of_range("Error: Name not found."));
        7:   84-block  0
call    0 returned 7
call    1 returned 7
branch  2 taken 7 (fallthrough)
branch  3 taken 0 (throw)
        7:   84-block  1
call    4 returned 7
    $$$$$:   84-block  2
call    5 never executed
        4:   85:    return *result;
        2:   85-block  0
call    0 returned 2
        2:   85-block  1
        -:   86:}
        -:   87:
        -:   88:std::unique_ptr<std::vector<Course>>
function _ZN18ContractController21getCoursesMatchingHPWERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES7_ called 3 returned 33% blocks executed 82%
        3:   89:ContractController::getCoursesMatchingHPW(const std::string &start_buff,
        -:   90:                                          const std::string &stop_buff) {
        -:   91:    unsigned int start, stop;
        -:   92:    try {
        3:   93:        start = std::stoi(start_buff);
        3:   93-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1 (throw)
        2:   94:        stop = std::stoi(stop_buff);
        2:   94-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:   95:    }
        2:   96:    catch (std::invalid_argument &) {
        1:   96-block  0
call    0 returned 1
        1:   96-block  1
call    1 returned 1
        1:   97:        throw (std::invalid_argument("Invalid range"));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:   97-block  0
call    4 returned 1
    $$$$$:   97-block  1
call    5 never executed
        -:   98:    }
        -:   99:
        2:  100:    if (start > stop)
        2:  100-block  0
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        1:  101:        throw (std::invalid_argument("Invalid range"));
        1:  101-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  101-block  1
call    4 returned 0
    $$$$$:  101-block  2
call    5 never executed
        -:  102:
        1:  103:    auto vector = std::make_unique<std::vector<Course>>();
        1:  103-block  0
call    0 returned 1
        -:  104:
        5:  105:    for (auto &it: i_repo) {
call    0 returned 1
call    1 returned 1
        5:  105-block  0
call    2 returned 5
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  105-block  1
call    5 returned 4
        4:  105-block  2
call    6 returned 4
        4:  106:        if (it.getHPW() >= start && it.getHPW() <= stop) {
call    0 returned 4
branch  1 taken 3 (fallthrough)
branch  2 taken 1
        3:  106-block  0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
        3:  106-block  1
        1:  106-block  2
        4:  106-block  3
branch  6 taken 3 (fallthrough)
branch  7 taken 1
        3:  107:            vector->push_back(it);
        3:  107-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        -:  108:        }
        -:  109:    }
        1:  110:    return vector;
        1:  110-block  0
        1:  110-block  1
        -:  111:}
        -:  112:
        -:  113:std::unique_ptr<std::vector<Course>>
function _ZN18ContractController25getCoursesMatchingTeacherERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 88%
        1:  114:ContractController::getCoursesMatchingTeacher(const std::string &teacher_name) {
        1:  115:    auto vector = std::make_unique<std::vector<Course>>();
        1:  115-block  0
call    0 returned 1
        -:  116:
        5:  117:    for (auto &it: i_repo) {
call    0 returned 1
call    1 returned 1
        5:  117-block  0
call    2 returned 5
branch  3 taken 4 (fallthrough)
branch  4 taken 1
        4:  117-block  1
call    5 returned 4
        4:  117-block  2
call    6 returned 4
        4:  118:        if (it.get_teacher() == teacher_name) {
call    0 returned 4
call    1 returned 4
branch  2 taken 2 (fallthrough)
branch  3 taken 2
        2:  119:            vector->push_back(it);
        2:  119-block  0
call    0 returned 2
call    1 returned 2
branch  2 taken 2 (fallthrough)
branch  3 taken 0 (throw)
        -:  120:        }
        -:  121:    }
        1:  122:    return vector;
        1:  122-block  0
        1:  122-block  1
        -:  123:}
        -:  124:
        -:  125:std::unique_ptr<std::vector<Course>>
function _ZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 4 returned 75% blocks executed 76%
        4:  126:ContractController::getSortedBy(const std::string &criterion) {
        8:  127:    std::function<bool(const Course &first, const Course &second)> cmp;
        4:  127-block  0
call    0 returned 4
        3:  127-block  1
call    1 returned 3
        1:  127-block  2
call    2 returned 1
        4:  128:    if (criterion == "teacher") {
call    0 returned 4
branch  1 taken 1 (fallthrough)
branch  2 taken 3
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E_clESA_SA_ called 8 returned 100% blocks executed 100%
        8:  129:        cmp = [](const Course &first, const Course &second) {
        8:  130:            if (first.get_teacher() < second.get_teacher())
        8:  130-block  0
call    0 returned 8
call    1 returned 8
call    2 returned 8
branch  3 taken 2 (fallthrough)
branch  4 taken 6
        2:  131:                return true;
        2:  131-block  0
        6:  132:            else if (first.get_teacher() == second.get_teacher())
        6:  132-block  0
call    0 returned 6
call    1 returned 6
call    2 returned 6
branch  3 taken 1 (fallthrough)
branch  4 taken 5
        1:  133:                return first.get_type() < second.get_type();
        1:  133-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
        -:  134:            else
        5:  135:                return false;
        5:  135-block  0
        1:  136:        };
        1:  136-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  136-block  1
    $$$$$:  136-block  2
        3:  137:    } else if (criterion == "name") {
        3:  137-block  0
call    0 returned 3
branch  1 taken 1 (fallthrough)
branch  2 taken 2
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E0_clESA_SA_ called 7 returned 100% blocks executed 79%
        7:  138:        cmp = [](const Course &first, const Course &second) {
        7:  139:            if (first.get_name() < second.get_name())
        7:  139-block  0
call    0 returned 7
call    1 returned 7
call    2 returned 7
branch  3 taken 3 (fallthrough)
branch  4 taken 4
        3:  140:                return true;
        3:  140-block  0
        4:  141:            else if (first.get_name() == second.get_name())
        4:  141-block  0
call    0 returned 4
call    1 returned 4
call    2 returned 4
branch  3 taken 0 (fallthrough)
branch  4 taken 4
    #####:  142:                return first.get_type() < second.get_type();
    %%%%%:  142-block  0
call    0 never executed
call    1 never executed
call    2 never executed
        -:  143:            else
        4:  144:                return false;
        4:  144-block  0
        1:  145:        };
        1:  145-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  145-block  1
    $$$$$:  145-block  2
        2:  146:    } else if (criterion == "hours") {
        2:  146-block  0
call    0 returned 2
branch  1 taken 1 (fallthrough)
branch  2 taken 1
function _ZZN18ContractController11getSortedByERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseSA_E1_clESA_SA_ called 8 returned 100% blocks executed 100%
        8:  147:        cmp = [](const Course &first, const Course &second) {
        8:  148:            return first.getHPW() < second.getHPW();
        8:  148-block  0
call    0 returned 8
call    1 returned 8
        -:  149:
        -:  150://        if(first.getHPW() < second.getHPW())
        -:  151://            return true;
        -:  152://        else if(first.getHPW() == second.getHPW())
        -:  153://            return first.get_type() < second.get_type();
        -:  154://        else
        -:  155://            return false;
        1:  156:        };
        1:  156-block  0
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0 (throw)
        1:  156-block  1
    $$$$$:  156-block  2
        -:  157:    } else {
        1:  158:        throw (std::invalid_argument("Error: Invalid sort criterion."));
        1:  158-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  158-block  1
call    4 returned 1
    $$$$$:  158-block  2
call    5 never executed
        -:  159:    }
        -:  160:
        3:  161:    auto result = std::make_unique<std::vector<Course>>(this->i_repo.getVector());
        3:  161-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        -:  162:
        3:  163:    std::sort(result->begin(), result->end(), cmp);
        3:  163-block  0
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
        3:  163-block  1
call    3 returned 3
call    4 returned 3
call    5 returned 3
call    6 returned 3
call    7 returned 3
branch  8 taken 3 (fallthrough)
branch  9 taken 0 (throw)
        3:  163-block  2
call   10 returned 3
    $$$$$:  163-block  3
call   11 never executed
    $$$$$:  163-block  4
        -:  164://  quicksort(*result, 0, result->size()-1, cmp);
        6:  165:    return result;
        3:  165-block  0
        -:  166:}
        -:  167:
function _ZN18ContractController22add_course_to_contractERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 50% blocks executed 75%
        2:  168:void ContractController::add_course_to_contract(const std::string &name) {
function _ZZN18ContractController22add_course_to_contractERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEENKUlRK6CourseE_clESA_ called 5 returned 100% blocks executed 100%
        5:  169:    auto result = std::find_if(i_repo.cbegin(), i_repo.cend(), [name](const Course &c) {
        5:  170:        return c.get_name() == name;
        5:  170-block  0
call    0 returned 5
call    1 returned 5
        2:  171:    });
        2:  171-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  171-block  1
call    3 returned 2
call    4 returned 2
call    5 returned 2
branch  6 taken 2 (fallthrough)
branch  7 taken 0 (throw)
        2:  171-block  2
call    8 returned 2
    $$$$$:  171-block  3
call    9 never executed
    $$$$$:  171-block  4
        -:  172:
        2:  173:    if (result == i_repo.cend()) {
call    0 returned 2
call    1 returned 2
branch  2 taken 1 (fallthrough)
branch  3 taken 1
        1:  174:        throw (std::out_of_range("Error: Course not found."));
        1:  174-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  174-block  1
call    4 returned 1
    $$$$$:  174-block  2
call    5 never executed
        -:  175:    }
        -:  176:
        1:  177:    contract.add(*result);
        1:  177-block  0
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  178:}
        1:  178-block  0
        -:  179:
function _ZN18ContractController33get_number_of_courses_in_contractEv called 3 returned 100% blocks executed 100%
        3:  180:size_t ContractController::get_number_of_courses_in_contract() {
        3:  181:    return contract.get_size();
        3:  181-block  0
call    0 returned 3
        -:  182:}
        -:  183:
function _ZN18ContractController14clear_contractEv called 1 returned 100% blocks executed 100%
        1:  184:void ContractController::clear_contract() {
        1:  185:    contract.clear();
        1:  185-block  0
call    0 returned 1
        1:  186:}
        -:  187:
function _ZN18ContractController23export_contract_to_fileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 1 returned 100% blocks executed 100%
        1:  188:void ContractController::export_contract_to_file(const std::string &filename) {
        1:  189:    contract.saveToFile(filename);
        1:  189-block  0
call    0 returned 1
        1:  190:}
        -:  191:
function _ZN18ContractController17generate_contractERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 67% blocks executed 72%
        3:  192:void ContractController::generate_contract(const std::string &count_buff) {
        -:  193:    size_t count;
        -:  194:    try {
        3:  195:        count = std::stoi(count_buff);
        3:  195-block  0
call    0 returned 3
branch  1 taken 2 (fallthrough)
branch  2 taken 1 (throw)
        -:  196:    }
        2:  197:    catch (std::invalid_argument &) {
        1:  197-block  0
call    0 returned 1
        1:  197-block  1
call    1 returned 1
        1:  198:        throw (std::invalid_argument("Invalid number of courses."));
call    0 returned 1
call    1 returned 1
branch  2 taken 1 (fallthrough)
branch  3 taken 0 (throw)
        1:  198-block  0
call    4 returned 1
    $$$$$:  198-block  1
call    5 never executed
        -:  199:    }
        -:  200:
        2:  201:    std::uniform_int_distribution<> uni_dist(1, 10);
        2:  201-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        4:  202:    for (size_t i = 0; i < count; ++i) {
        2:  202-block  0
        4:  202-block  1
branch  0 taken 2 (fallthrough)
branch  1 taken 2
        4:  203:        auto teacher = select_randomly(people_names.begin(), people_names.end());
        2:  203-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 2
    $$$$$:  203-block  1
call    6 never executed
        4:  204:        auto name = select_randomly(course_names.begin(), course_names.end());
        2:  204-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 2
    $$$$$:  204-block  1
call    6 never executed
        4:  205:        auto type = select_randomly(course_types.begin(), course_types.end());
        2:  205-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
call    5 returned 2
    $$$$$:  205-block  1
call    6 never executed
        2:  206:        auto hpw = uni_dist(rng) * 2;
        2:  206-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  207:
        4:  208:        Course c{name, type, teacher, static_cast<unsigned int>(hpw), i_repo.next_free_id};
        2:  208-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  208-block  1
call    3 returned 2
    $$$$$:  208-block  2
call    4 never executed
        2:  209:        i_repo.add(c);
        2:  209-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        2:  210:        contract.add(c);
        2:  210-block  0
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0 (throw)
        -:  211:    }
        2:  212:}
        2:  212-block  0
        -:  213:
function _ZN18ContractController17getCourseTypeDataB5cxx11Ev called 1 returned 100% blocks executed 92%
        1:  214:std::unique_ptr<std::unordered_map<std::basic_string<char>, unsigned long>> ContractController::getCourseTypeData() {
        1:  215:    auto data = std::make_unique<std::unordered_map<std::string, size_t>>();
        1:  215-block  0
call    0 returned 1
        4:  216:    for(const auto& course : i_repo){
call    0 returned 1
call    1 returned 1
        4:  216-block  0
call    2 returned 4
branch  3 taken 3 (fallthrough)
branch  4 taken 1
        3:  216-block  1
call    5 returned 3
        3:  216-block  2
call    6 returned 3
        3:  217:        if(data->contains(course.get_type())){
call    0 returned 3
call    1 returned 3
call    2 returned 3
branch  3 taken 3 (fallthrough)
branch  4 taken 0 (throw)
        3:  217-block  0
branch  5 taken 1 (fallthrough)
branch  6 taken 2
        1:  218:            (*data)[course.get_type()] += 1;
        1:  218-block  0
call    0 returned 1
call    1 returned 1
call    2 returned 1
branch  3 taken 1 (fallthrough)
branch  4 taken 0 (throw)
        1:  218-block  1
        -:  219:        } else {
        2:  220:            (*data)[course.get_type()] = 1;
        2:  220-block  0
call    0 returned 2
call    1 returned 2
call    2 returned 2
branch  3 taken 2 (fallthrough)
branch  4 taken 0 (throw)
        2:  220-block  1
        -:  221:        }
        -:  222:    }
        1:  223:    return data;
        1:  223-block  0
        1:  223-block  1
        -:  224:}
        -:  225:
        -:  226://int pivot(std::vector<Course> &list, int l, int r,
        -:  227://          const std::function<bool(const Course &first, const Course &second)> &cmp) {
        -:  228://    Course p = list[r];
        -:  229://    int lt = l - 1;
        -:  230://    for (int i = l; i < r; ++i) {
        -:  231://        if (cmp(list[i], p)) {
        -:  232://            ++lt;
        -:  233://            Course aux = list[lt];
        -:  234://            list[lt] = list[i];
        -:  235://            list[i] = aux;
        -:  236://        }
        -:  237://    }
        -:  238://    Course aux = list[r];
        -:  239://    list[r] = list[lt + 1];
        -:  240://    list[lt + 1] = aux;
        -:  241://    return lt + 1;
        -:  242://}
        -:  243://
        -:  244://void quicksort(std::vector<Course> &list, int l, int r,
        -:  245://               const std::function<bool(const Course &first, const Course &second)> &cmp) {
        -:  246://    if (l < r) {
        -:  247://        int p_index = pivot(list, l, r, cmp);
        -:  248://
        -:  249://        quicksort(list, l, p_index - 1, cmp);
        -:  250://        quicksort(list, p_index + 1, r, cmp);
        -:  251://    }
        -:  252://}
