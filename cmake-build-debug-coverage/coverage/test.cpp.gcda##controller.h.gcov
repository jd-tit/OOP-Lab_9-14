        -:    0:Source:/mnt/c/Projects/fac/OOP/Lab8/controller.h
        -:    0:Graph:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/test.cpp.gcno
        -:    0:Data:/mnt/c/Projects/fac/OOP/Lab8/cmake-build-debug-coverage/CMakeFiles/Lab5_Contract_de_studii.dir/test.cpp.gcda
        -:    0:Runs:1
        -:    1://
        -:    2:// Created by jdt on 3/27/2022.
        -:    3://
        -:    4:
        -:    5:#ifndef LAB5_CONTRACT_DE_STUDII_CONTROLLER_H
        -:    6:#define LAB5_CONTRACT_DE_STUDII_CONTROLLER_H
        -:    7:
        -:    8:#include <string>
        -:    9:#include <memory>
        -:   10:#include <fstream>
        -:   11:#include <random>
        -:   12:#include <unordered_map>
        -:   13:
        -:   14:#include "domain.h"
        -:   15:#include "repo.h"
        -:   16:#include "contract.h"
        -:   17:
        -:   18:class ContractController {
        -:   19:private:
        -:   20:    Repo<Course> i_repo;
        -:   21:    Contract contract;
        -:   22:
        -:   23:    static std::vector<std::string> people_names, course_names, course_types;
        -:   24:    static std::default_random_engine rng;
        -:   25:
        -:   26:    static std::string select_randomly(std::vector<std::string>::iterator start, const std::vector<std::string>::iterator end){
        -:   27:        auto dist = std::distance(start, end)-1;
        -:   28:        std::uniform_int_distribution<> uni_dist(0, static_cast<int>(dist));
        -:   29:        auto val= uni_dist(rng);
        -:   30:        std::advance(start, val);
        -:   31:        return *start;
        -:   32:    }
        -:   33:
        -:   34:public:
function _ZN18ContractControllerC2Ev called 3 returned 100% blocks executed 80%
        3:   35:    ContractController() : i_repo(Repo<Course>()), contract{Contract()} {}
        3:   35-block  0
call    0 returned 3
call    1 returned 3
branch  2 taken 3 (fallthrough)
branch  3 taken 0 (throw)
        3:   35-block  1
    $$$$$:   35-block  2
call    4 never executed
        -:   36:
        -:   37:    /**
        -:   38:     * Initialize static members of ContractController
        -:   39:     */
        -:   40:    static void init(){
        -:   41:        std::fstream names("names.txt", std::ios::in);
        -:   42:        std::fstream courses("course_names.txt", std::ios::in);
        -:   43:
        -:   44:        if(!names.is_open())
        -:   45:            throw(std::invalid_argument("Error: File 'names.txt' couldn't be found."));
        -:   46:
        -:   47:        if(!courses.is_open())
        -:   48:            throw(std::invalid_argument("Error: File 'course_names.txt' couldn't be found."));
        -:   49:
        -:   50:        while(names.good()){
        -:   51:            std::string line;
        -:   52:            std::getline(names, line);
        -:   53:            people_names.emplace_back(line);
        -:   54:        }
        -:   55:
        -:   56:        while(courses.good()){
        -:   57:            std::string line;
        -:   58:            std::getline(courses, line);
        -:   59:            erase_if(line, [](char c){return c == '\r';});
        -:   60:            course_names.emplace_back(line);
        -:   61:        }
        -:   62:
        -:   63:        course_types = {"Mandatory", "Optional"};
        -:   64:    }
        -:   65:
        -:   66:    /**
        -:   67:     * Add a course to the internal repository.
        -:   68:     * @param name
        -:   69:     * @param teacher
        -:   70:     * @param type
        -:   71:     * @param hours_per_week
        -:   72:     */
        -:   73:    void add_course(const std::string &name, const std::string &teacher,
        -:   74:                    const std::string &type,
        -:   75:                    const std::string &hours_per_week);
        -:   76:
        -:   77:    /**
        -:   78:     * Get const-restricted acces to the internal repository.
        -:   79:     * @return
        -:   80:     */
        -:   81:    [[nodiscard]] const Repo<Course> &getAll();
        -:   82:
        -:   83:
        -:   84:/**
        -:   85: * Remove a course from the internal repo.
        -:   86: * @param id_buff Buffer containing the id of the course to be removed.
        -:   87: */
        -:   88:    void remove_course(const std::string &id_buff);
        -:   89:
        -:   90:    /**
        -:   91:     * Modify a course.
        -:   92:     * @param id_buff Buffer containing the id of the course to be edited.
        -:   93:     * @param name The new name
        -:   94:     * @param teacher The new Teacher's name
        -:   95:     * @param type The new type of the course
        -:   96:     * @param hours_per_week The new number of hours per week.
        -:   97:     */
        -:   98:    void modify_course(const std::string &id_buff, const std::string &name,
        -:   99:                       const std::string &teacher,
        -:  100:                       const std::string &type,
        -:  101:                       const std::string &hours_per_week);
        -:  102:
        -:  103:    /**
        -:  104:     * Get the course matching a given course name.
        -:  105:     * @param name
        -:  106:     * @return
        -:  107:     */
        -:  108:    const Course &getCourse(const std::string &name);
        -:  109:
        -:  110:    /**
        -:  111:     * Get all courses that have a number of hours per week in the range [start, stop]
        -:  112:     * @param start_buff Buffer containing the start number
        -:  113:     * @param stop_buff Buffer containing the stop number.
        -:  114:     * @return
        -:  115:     */
        -:  116:    std::unique_ptr<std::vector<Course>>
        -:  117:    getCoursesMatchingHPW(const std::string &start_buff, const std::string &stop_buff);
        -:  118:
        -:  119:/**
        -:  120: * Get all courses that have a given teacher.
        -:  121: * @param teacher_name
        -:  122: * @return
        -:  123: */
        -:  124:    std::unique_ptr<std::vector<Course>>
        -:  125:    getCoursesMatchingTeacher(const std::string &teacher_name);
        -:  126:
        -:  127:    /**
        -:  128:     * Get all of the courses, sorted by a given criterion
        -:  129:     * @param criterion The criterion to sort by.
        -:  130:     * @return A copy of the internal repository, sorted accordingly.
        -:  131:     */
        -:  132:    std::unique_ptr<std::vector<Course>> getSortedBy(const std::string &criterion);
        -:  133:
        -:  134:    /**
        -:  135:     * Add a course to the contract, by name.
        -:  136:     * @param name The name of the course to be added
        -:  137:     */
        -:  138:    void add_course_to_contract(const std::string &name);
        -:  139:
        -:  140:    /**
        -:  141:     * Clear the student contract.
        -:  142:     */
        -:  143:    void clear_contract();
        -:  144:
        -:  145:    /**
        -:  146:     * Export the current contract to a file.
        -:  147:     */
        -:  148:    void export_contract_to_file(const std::string& filename);
        -:  149:
        -:  150:    /**
        -:  151:     * Generate `count` random courses and add them to the contract.
        -:  152:     * @param count_buff
        -:  153:     */
        -:  154:    void generate_contract(const std::string& count_buff);
        -:  155:
        -:  156:
        -:  157:    /**
        -:  158:     * Get the number of courses in the current contract
        -:  159:     */
        -:  160:    size_t get_number_of_courses_in_contract();
        -:  161:
        -:  162:    std::unique_ptr<std::unordered_map<std::string, size_t>> getCourseTypeData();
        -:  163:};
        -:  164:
        -:  165:#endif //LAB5_CONTRACT_DE_STUDII_CONTROLLER_H
